#name of the network
name: "RNN" 

input: "data"

# dimension of input data is given by TxNXI where T:length of 
# each data sequence, N is the batch size,I is the dim of data

input_shape {dim: 1000 dim: 1 dim: 1}

# Previous prediction is fed back to the input
input: "p2red" 
input_shape {dim: 1000 dim: 1  dim: 1} 

# binary indicator. clip=0 indicates start of a new sequence 
# while clip=1 indicates continuity of a sequence

input: "clip" 
input_shape {dim: 1000 dim: 1 dim: 1}

input: "label" #target values	
input_shape {dim: 1000 dim: 1 dim: 1}


layer {
  name: "Silence"
  type: "Silence"
  bottom: "label" #silence label blob 
  include: { phase: TEST } #used only in Test phase
}

layer {
  name: "lstm1"
  type: "Lstm"
  bottom: "data"
  bottom: "p2red"
  bottom: "clip"
  top: "lstm1"
  
  param {
    lr_mult: 1 #input-hidden learning scale
  }
  param {
    lr_mult: 1 #hidden-hidden learing scale
  }
  param {
    lr_mult: 2 #bias learning scale
  }

  lstm_param {
    num_output: 100
    clipping_threshold: 0.1
    weight_filler {
      type: "gaussian"
	  std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {

  name: "lstm2"
  type: "Lstm"
  bottom: "lstm1"
  bottom: "clip"
  top: "lstm2"
  
  param {
    lr_mult: 1 #input learning scale
  }
  param {
    lr_mult: 1 #hidden state learing scale
  }
  param {
    lr_mult: 2 #bias learning scale
  }

  lstm_param {
    num_output: 100
    clipping_threshold: 0.1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer { #inner product layer or fc layer
  name: "ip1"
  type: "InnerProduct"
  bottom: "lstm2" #input data blob
  top: "ip1" #output data blob

  inner_product_param {
    num_output: 1 #number of outputs
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss" #loss function 
  bottom: "ip1" #prediction from ip1 layer
  bottom: "label" #true values from data layer
  top: "loss" #output loss function
  include: { phase: TRAIN } #used only in Train phase
}